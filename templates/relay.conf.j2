# Increase max message size to prevent truncating messages
# 64k is recommended for receiving Windows Event Logs
$MaxMessageSize 64k

# An on-disk queue is created for this action. If the remote host is
# down, messages are spooled to disk and sent when it is up again.

$WorkDirectory /var/log/buffer  # where to place spool files
$ActionQueueFileName fwdRule1   # unique name prefix for spool files
$ActionQueueMaxDiskSpace 1g     # 1gb space limit (use as much as possible)
$ActionQueueSaveOnShutdown on   # save messages to disk on shutdown
$ActionQueueType LinkedList     # run asynchronously
$ActionResumeRetryCount -1      # infinite retries if host is down

# forward messages with precise timestamp and zone information
$ActionForwardDefaultTemplate RSYSLOG_ForwardFormat

# --- Open TCP and UDP Ports --- #

# UDP syslog reception
module(load="imudp")
input(type="imudp" port="{{ rsyslog_udp_port }}")

# Unencrypted TCP syslog reception
module(load="imptcp")
input(type="imptcp" port="{{ rsyslog_tcp_port }}")

# --- Forward to rsyslog collector --- #
# After shipping logs not from this host, stop processing them so they don't
# clog the local log files
if $hostname != '{{ ansible_fqdn }}' then {
    {% if rsyslog_encrypt == 'true' and rsyslog_protocol == 'tcp' %}
    action(type="omfwd" target="{{ rsyslog_relay_collector }}" protocol="{{ rsyslog_protocol }}" port="{{ rsyslog_tls_port }}")
    {% elif rsyslog_protocol == 'tcp' %}
    action(type="omfwd" target="{{ rsyslog_relay_collector }}" protocol="{{ rsyslog_protocol }}" port="{{ rsyslog_tcp_port }}")
    {% elif rsyslog_protocol == 'udp' %}
    action(type="omfwd" target="{{ rsyslog_relay_collector }}" protocol="{{ rsyslog_protocol }}" port="{{ rsyslog_udp_port }}")
    {% endif %}
    stop
} else {
    # Ship logs from this host to the remote collector and continue
    # to process them so they show up normally
    {% if rsyslog_encrypt == 'true' and rsyslog_protocol == 'tcp' %}
    action(type="omfwd" target="{{ rsyslog_relay_collector }}" protocol="{{ rsyslog_protocol }}" port="{{ rsyslog_tls_port }}")
    {% elif rsyslog_protocol == 'tcp' %}
    action(type="omfwd" target="{{ rsyslog_relay_collector }}" protocol="{{ rsyslog_protocol }}" port="{{ rsyslog_tcp_port }}")
    {% elif rsyslog_protocol == 'udp' %}
    action(type="omfwd" target="{{ rsyslog_relay_collector }}" protocol="{{ rsyslog_protocol }}" port="{{ rsyslog_udp_port }}")
    {% endif %}
}
