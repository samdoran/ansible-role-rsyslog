# TCP {{ rsyslog_tcp_port }} and UDP {{ rsyslog_udp_port }} for unecrypted traffic
{% if encrypt_syslog == 'true' and transport == 'tcp' %}
# Server uses TCP {{ rsyslog_tls_port }} for encrytped traffic,
$DefaultNetstreamDriverCAFile /etc/pki/rsyslog/rsyslog-ca.pem
$DefaultNetstreamDriver gtls            # use gtls netstream driver
$ActionSendStreamDriverMode 1           # require TLS for the connection
$ActionSendStreamDriverAuthMode anon    # server is NOT authenticated
{% endif %}

# An on-disk queue is created for this action. If the remote host is
# down, messages are spooled to disk and sent when it is up again.

$WorkDirectory /var/lib/rsyslog # where to place spool files
$ActionQueueFileName fwdRule1   # unique name prefix for spool files
$ActionQueueMaxDiskSpace 1g     # 1gb space limit (use as much as possible)
$ActionQueueSaveOnShutdown on   # save messages to disk on shutdown
$ActionQueueType LinkedList     # run asynchronously
$ActionResumeRetryCount -1      # infinite retries if host is down

# Increase max message size to prevent truncating messages
$MaxMessageSize 32k

{% if "nginx" in group_names %}
# --- Capture nginx access_log and error_log --- #
# nginx access log
$InputFileName /var/log/nginx/access.log
$InputFileTag nginx-access:
$InputFileStateFile nginx-access-state
$InputFileFacility local0
$InputFileSeverity info
$InputRunFileMonitor

# nginx error log
$InputFileName /var/log/nginx/error.log
$InputFileTag nginx-error:
$InputFileStateFile nginx-error-state
$InputFileFacility local0
$InputFileSeverity err
$InputRunFileMonitor

{% if encrypt_syslog == 'true' and transport == 'tcp' %}
local0.* @@{{ rsyslog_collector }}:{{ rsyslog_tls_port }}       # Send everything via TCP {{ rsyslog_tls_port }}
{% elif transport == 'tcp' %}
local0.* @@{{ rsyslog_collector }}:{{ rsyslog_tcp_port }}       # Send everything via TCP {{ rsyslog_tcp_port }}
{% elif transport == 'udp' %}
local0.* @{{ rsyslog_collector }}:{{ rsyslog_udp_port }}       # Send everything via UDP {{ rsyslog_udp_port }}
{% endif %}
& ~
{% endif %}

{% if "ls_parser" in group_names %}
# --- Capture logstash logs --- #
$InputFileName /var/log/logstash/logstash.log
$InputFileTag logstash:
$InputFileStateFile logstash-state
$InputFileFacility local0
$InputFileSeverity info
$InputRunFileMonitor

{% if encrypt_syslog == 'true' and transport == 'tcp' %}
local0.* @@{{ rsyslog_collector }}:{{ rsyslog_tls_port }}       # Send everything via TCP {{ rsyslog_tls_port }}
{% elif transport == 'tcp' %}
local0.* @@{{ rsyslog_collector }}:{{ rsyslog_tcp_port }}       # Send everything via TCP {{ rsyslog_tcp_port }}
{% elif transport == 'udp' %}
local0.* @{{ rsyslog_collector }}:{{ rsyslog_udp_port }}       # Send everything via UDP {{ rsyslog_udp_port }}
{% endif %}
& ~
{% endif %}

{% if "redis" in group_names %}
# --- Capture redis logs --- #
$InputFileName /var/log/redis/redis.log
$InputFileTag redis:
$InputFileStateFile redis-state
$InputFileFacility local0
$InputFileSeverity info
$InputRunFileMonitor

{% if encrypt_syslog == 'true' and transport == 'tcp' %}
local0.* @@{{ rsyslog_collector }}:{{ rsyslog_tls_port }}       # Send everything via TCP {{ rsyslog_tls_port }}
{% elif transport == 'tcp' %}
local0.* @@{{ rsyslog_collector }}:{{ rsyslog_tcp_port }}       # Send everything via TCP {{ rsyslog_tcp_port }}
{% elif transport == 'udp' %}
local0.* @{{ rsyslog_collector }}:{{ rsyslog_udp_port }}       # Send everything via UDP {{ rsyslog_udp_port }}
{% endif %}
& ~
{% endif %}

# Ship all syslogs to {{ rsyslog_collector }}
{% if encrypt_syslog == 'true' and transport == 'tcp' %}
*.* @@{{ rsyslog_collector }}:{{ rsyslog_tls_port }}       # Send everything via TCP {{ rsyslog_tls_port }}
{% elif transport == 'tcp' %}
*.* @@{{ rsyslog_collector }}:{{ rsyslog_tcp_port }}       # Send everything via TCP {{ rsyslog_tcp_port }}
{% elif transport == 'udp' %}
*.* @{{ rsyslog_collector }}:{{ rsyslog_udp_port }}       # Send everything via UDP {{ rsyslog_udp_port }}
{% endif %}

